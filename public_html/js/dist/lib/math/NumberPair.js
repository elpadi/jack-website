define(["underscore","lib/fn/curry","lib/operators/greaterThan"],function(underscore,curry,greaterThan){function NumberPair(a,b){this.aliases=[];this.validators={isNumber:{a:function(n){return typeof n==="number"&&!isNaN(n)},b:function(n){return typeof n==="number"&&!isNaN(n)}}};this.setPair(a,b)}NumberPair.prototype={a:0,b:0,r:NaN,converter:null,setAliasesValues:function(){for(i in this.aliases){this[this.aliases[i][0]]=this.a;this[this.aliases[i][1]]=this.b;this[this.aliases[i][2]]=this.r}},alias:function(aliasForA,aliasForB,aliasForR){if(arguments.length<3){aliasForR="r"}this.aliases.push([aliasForA,aliasForB,aliasForR]);this.setAliasesValues()},getValidators:function(key){return _.pluck(this.validators,key)},setPair:function(a,b){var values=this.converter?this.converter(a,b):[a,b];if(_.every(this.getValidators("a"),function(f){return f(values[0])})){this.a=values[0]}if(_.every(this.getValidators("b"),function(f){return f(values[1])})){this.b=values[1]}this.r=this.b!==0?this.a/this.b:NaN;this.setAliasesValues()},constrainByMaximum:function(maxA,maxB){if(!("max"in this.validators)){this.validators.max={}}if(typeof maxA==="number"){this.validators.max.a=curry(greaterThan,maxA)}if(typeof maxB==="number"){this.validators.max.b=curry(greaterThan,maxB)}},constrainByRatio:function(ratio){this.converter=function(a,b){return[a,a*ratio]}},toString:function(){return"("+this.a+","+this.b+")"}};return NumberPair});