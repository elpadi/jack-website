define(["underscore","lib/fn/curry","lib/operators/difference","lib/operators/greaterThan","lib/operators/lessThan","lib/math/absdiff"],function(underscore,curry,difference,greaterThan,lessThan,absdiff){function NumberList(arr){this.list=arr}NumberList.prototype.list=null;NumberList.prototype.next=function(val){return this.max()<=val?NaN:this.select(curry(lessThan,val)).min()};NumberList.prototype.prev=function(val){return this.min()>=val?NaN:this.select(curry(greaterThan,val)).max()};NumberList.prototype.closest=function(val,fn){return this.has(val)?val:this.get(this.map(curry(absdiff,val)).composeMethods(undefined,"min","key"))};NumberList.prototype.min=function(){return Math.min.apply(this,this.list)};NumberList.prototype.max=function(){return Math.max.apply(this,this.list)};NumberList.prototype.sort=function(fn){return new NumberList(this.list.slice(0).sort(difference))};NumberList.prototype.get=function(index){return this.list[index]};NumberList.prototype.has=function(val){return _.indexOf(this.list,val)!==-1};NumberList.prototype.key=function(val){return _.indexOf(this.list,val)};NumberList.prototype.map=function(fn){return new NumberList(_.map(this.list,fn))};NumberList.prototype.select=function(fn){return new NumberList(_.select(this.list,fn))};NumberList.prototype.composeMethods=function(val){var methods=Array.prototype.slice.call(arguments,1);while(method=methods.shift()){val=this[method](val)}return val};return NumberList});