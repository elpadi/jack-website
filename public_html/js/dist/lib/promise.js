define(["./functions"],function(fn){function Promise(asyncFn){try{asyncFn(fn.bind(this.onSuccess,this))}catch(e){this.onError(e)}}Promise.prototype.state="pending";Promise.prototype.currentValue=null;Promise.prototype.isPromise=true;Promise.prototype.thenQueue=[];Promise.prototype.errorQueue=[];Promise.prototype.onSuccess=function(result){this.state="resolved";this.currentValue=result;this.runThen()};Promise.prototype.onError=function(result){this.state="rejected";this.runErrors()};Promise.prototype.then=function(fn){this.thenQueue.push(fn);this.state==="resolved"&&this.runThen();return this};Promise.prototype.runThen=function(){if(this.thenQueue.length===0){return null}this.currentValue=this.thenQueue.shift().call(null,this.currentValue)};function isPromise(val){return typeof val==="object"&&val instanceof Promise}function when(val,onSuccess,onError){var promise=isPromise(val)?val:new Promise(val);return promise.then(onSuccess,onError)}return{when:when,isPromise:isPromise}});